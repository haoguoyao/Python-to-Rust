PYTHON_TO_COMMON = {
    "module": "module",
    "function_definition": "function",
    "def": "function",
    "lambda": "function",
    "parameters": "parameters",
    "typed_parameter": "parameters",
    "block": "block",
    "call": "call",
    "argument_list": "call",
    "assignment": "assignment",
    "augmented_assignment": "assignment",
    "identifier": "variable",
    "return_statement": "return",
    "if_statement": "if",
    "elif_clause": "if",
    "while_statement": "while",
    "for_statement": "for",
    "break_statement": "break",
    "continue_statement": "continue",
    "class_definition": "class",
    "class": "class",
    "try_statement": "try",
    "except_clause": "try",
    "raise_statement": "raise",
    "import_statement": "import",
    "import_from_statement": "import",
    "decorator": "decorator",
    "string": "literal",
    "integer": "literal",
    "float": "literal",
    "true": "literal",
    "false": "literal",
    "binary_operator": "operator",
    "boolean_operator": "operator",
    "comparison_operator": "operator",
    "unary_operator": "operator",
    "subscript": "slice",
    "slice": "slice",
    "comment": "comment",
    "type": "annotation",
    "annotation": "annotation"
}
RUST_TO_COMMON = {
    "source_file": "module",
    "function_item": "function",
    "fn": "function",
    "lambda_expression": "function",
    "parameters": "parameters",
    "parameter": "parameters",
    "block": "block",
    "call_expression": "call",
    "arguments": "call",
    "let_declaration": "assignment",
    "assignment_expression": "assignment",
    "identifier": "variable",
    "field_identifier": "variable",
    "return_expression": "return",
    "if_expression": "if",
    "else_clause": "if",
    "while_expression": "while",
    "loop_expression": "while",
    "for_expression": "for",
    "break_expression": "break",
    "continue_expression": "continue",
    "struct_item": "struct",
    "enum_item": "enum",
    "trait_item": "class",
    "match_expression": "match",
    "use_declaration": "import",
    "attribute_item": "decorator",
    "attribute": "decorator",
    "string_literal": "literal",
    "char_literal": "literal",
    "boolean_literal": "literal",
    "integer_literal": "literal",
    "float_literal": "literal",
    "true": "literal",
    "false": "literal",
    "binary_expression": "operator",
    "unary_expression": "operator",
    "comparison_operator": "operator",
    "field_expression": "slice",
    "index_expression": "slice",
    "comment": "comment",
    "type_identifier": "annotation",
    "reference_type": "annotation",
    "generic_type": "annotation"
}